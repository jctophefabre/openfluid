/*

  This file is part of OpenFLUID software
  Copyright(c) 2007, INRA - Montpellier SupAgro


 == GNU General Public License Usage ==

  OpenFLUID is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  OpenFLUID is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with OpenFLUID. If not, see <http://www.gnu.org/licenses/>.


 == Other Usage ==

  Other Usage means a use of OpenFLUID that is inconsistent with the GPL
  license, and requires a written agreement between You and INRA.
  Licensees for Other Usage of OpenFLUID may use this file in accordance
  with the terms contained in the written agreement between You and INRA.

*/


/**
  @file config.hpp

  @author Jean-Christophe FABRE <jean-christophe.fabre@inra.fr>
*/


#ifndef __OPENFLUID_CONFIG_HPP__
#define __OPENFLUID_CONFIG_HPP__


#include <string>


// Definitions based on build options
#define OPENFLUID_GUI_ENABLED @OFBUILD_ENABLE_GUI_01@
#define OPENFLUID_LANDR_ENABLED @OFBUILD_ENABLE_LANDR_01@
#define OPENFLUID_MARKET_ENABLED @OFBUILD_ENABLE_MARKET_01@
#define OPENFLUID_SIM2DOC_ENABLED @OFBUILD_ENABLE_SIM2DOC_01@


namespace openfluid { namespace config {


// Main Name
const std::string MAINNAME = "@OPENFLUID_MAIN_NAME@";


// Default config file
const std::string DEFAULT_CONFIGFILE = "@OPENFLUID_DEFAULT_CONFIGFILE@";


// Relative openfluid directory
const std::string RELATIVE_PATH = "@OPENFLUID_RELATIVE_PATH@";


// Default directories
const std::string DEFAULT_INPUT_PATH = "@OPENFLUID_DEFAULT_INPUT_PATH@";
const std::string DEFAULT_OUTPUT_PATH = "@OPENFLUID_DEFAULT_OUTPUT_PATH@";

const std::string PROJECTS_PATH = "@OPENFLUID_PROJECTS_PATH@";
const std::string WARESDEV_PATH = "@OPENFLUID_WARESDEV_PATH@";
const std::string WARESBIN_PATH = "@OPENFLUID_WARESBIN_PATH@";
const std::string WORKSPACE_PATH = "@OPENFLUID_WORKSPACE_PATH@";


// Apps names
const std::string CMD_APP = "@OPENFLUID_CMD_APP@";
const std::string BUILDER_APP = "@OPENFLUID_BUILDER_APP@";
const std::string DEVSTUDIO_APP = "@OPENFLUID_DEVSTUDIO_APP@";
const std::string LOGEXPLORER_APP = "@OPENFLUID_LOGEXPLORER_APP@";
const std::string GITASKPASS_APP = "@OPENFLUID_GITASKPASS_APP@";


// Install prefix
const std::string INSTALL_PREFIX = "@CMAKE_INSTALL_PREFIX@";
const std::string INSTALL_BIN_PATH = "@OFBUILD_BIN_INSTALL_PATH@";
const std::string INSTALL_LIB_PATH = "@OFBUILD_LIB_INSTALL_PATH@";
const std::string INSTALL_INCLUDE_PATH = "@OFBUILD_INCLUDE_INSTALL_PATH@";
const std::string INSTALL_SHARE_PATH = "@OFBUILD_SHARE_INSTALL_PATH@";


// Workspaces
const std::string WORKSPACE_CONFIGFILE = "@OPENFLUID_WORKSPACE_CONFIGFILE@";


// Plugins extension
const std::string PLUGINS_EXT = "@OPENFLUID_PLUGINS_BINARY_EXTENSION@";


// Plugins suffixes
const std::string SIMULATORS_PLUGINS_SUFFIX = "@OPENFLUID_SIMULATORS_SUFFIX@";
const std::string OBSERVERS_PLUGINS_SUFFIX = "@OPENFLUID_OBSERVERS_SUFFIX@";
const std::string BUILDEREXTS_PLUGINS_SUFFIX = "@OPENFLUID_BUILDEREXTS_SUFFIX@";

// Ghosts suffixes
const std::string SIMULATORS_GHOSTS_SUFFIX = "@OPENFLUID_GHOSTSIMULATORS_SUFFIX@";

// Ghosts extension
const std::string GHOSTS_EXT = "@OPENFLUID_PLUGINS_GHOST_EXTENSION@";


// Simulators plugins dirs
const std::string SIMULATORS_PATH = "@OPENFLUID_SIMULATORS_PATH@";
const std::string SIMULATORS_WARESBIN_USR_PATH = "@OPENFLUID_WARESBIN_PATH@/@OPENFLUID_SIMULATORS_PATH@";
const std::string SIMULATORS_WARESBIN_STD_PATH =
    "@OFBUILD_LIB_INSTALL_PATH@/@OPENFLUID_MAIN_NAME@/@OPENFLUID_SIMULATORS_PATH@";


// Observers plugins dirs
const std::string OBSERVERS_PATH = "@OPENFLUID_OBSERVERS_PATH@";
const std::string OBSERVERS_WARESBIN_USR_PATH = "@OPENFLUID_WARESBIN_PATH@/@OPENFLUID_OBSERVERS_PATH@";
const std::string OBSERVERS_WARESBIN_STD_PATH =
    "@OFBUILD_LIB_INSTALL_PATH@/@OPENFLUID_MAIN_NAME@/@OPENFLUID_OBSERVERS_PATH@";


// Builder-extensions plugins dirs
const std::string BUILDEREXTS_PATH = "@OPENFLUID_BUILDEREXTS_PATH@";
const std::string BUILDEREXTS_WARESBIN_USR_PATH = "@OPENFLUID_WARESBIN_PATH@/@OPENFLUID_BUILDEREXTS_PATH@";
const std::string BUILDEREXTS_WARESBIN_STD_PATH =
    "@OFBUILD_LIB_INSTALL_PATH@/@OPENFLUID_MAIN_NAME@/@OPENFLUID_BUILDEREXTS_PATH@";


// Examples dirs
const std::string EXAMPLES_PATH = "@OPENFLUID_EXAMPLES_PATH@";
const std::string EXAMPLES_STD_PATH = "@OPENFLUID_EXAMPLES_INSTALL_PATH@";


// Hubs dirs
const std::string HUBS_CACHE_PATH = "@OPENFLUID_HUBS_CACHE_PATH@";


// Translations dirs
const std::string SHARE_TRANSLATIONS_INSTALL_PATH = "@OPENFLUID_SHARE_TRANSLATIONS_INSTALL_PATH@";
const std::string TRANSLATIONS_FILEROOT = "@OPENFLUID_TRANSLATIONS_FILEROOT@";


// Log files
const std::string MESSAGES_LOG_FILE = "@OPENFLUID_MESSAGES_LOG_FILE@";


// Profiling files
const std::string CUMULATIVE_PROFILE_FILE = "@OPENFLUID_CUMULATIVE_PROFILE_FILE@";
const std::string SCHEDULE_PROFILE_FILE = "@OPENFLUID_SCHEDULE_PROFILE_FILE@";
const std::string TIMEINDEX_PROFILE_FILE = "@OPENFLUID_TIMEINDEX_PROFILE_FILE@";


// Market
const std::string MARKETBAG_PATH = "@OPENFLUID_MARKETBAGDIR@";
const std::string MARKETPLACE_SITEFILE = "@OPENFLUID_MARKETPLACE_SITEFILE@";
const std::string MARKETPLACE_CATALOGFILE = "@OPENFLUID_MARKETPLACE_CATALOGFILE@";
const std::string MARKET_COMMONBUILDOPTS = "@OPENFLUID_MARKET_COMMONBUILDOPTS@";


// Waresdev
const std::string WARESDEV_CMAKE_USERFILE = "@OPENFLUID_WARESDEV_CMAKE_USERFILE@";
const std::string WARESDEV_CMAKE_SIMCPPVAR = "@OPENFLUID_WARESDEV_CMAKE_SIMCPPVAR@";
const std::string WARESDEV_CMAKE_OBSCPPVAR = "@OPENFLUID_WARESDEV_CMAKE_OBSCPPVAR@";
const std::string WARESDEV_CMAKE_BEXTCPPVAR = "@OPENFLUID_WARESDEV_CMAKE_BEXTCPPVAR@";
const std::string WARESDEV_PACKAGE_CONFFILE = "ofwdp.conf";


// Project
const std::string PROJECT_FILE = "@OPENFLUID_PROJECT_FILE@";
const std::string PROJECT_INPUTDIR = "@OPENFLUID_PROJECT_INPUT_PATH@";
const std::string PROJECT_OUTPUTDIRPREFIX = "@OPENFLUID_PROJECT_OUTPUT_PATHPREFIX@";


// Shared ressources paths
const std::string SHARE_INSTALL_PATH = "@OPENFLUID_SHARE_INSTALL_PATH@";
const std::string SHARE_COMMON_INSTALL_PATH = "@OPENFLUID_SHARE_COMMON_INSTALL_PATH@";
const std::string SHARE_APPS_INSTALL_PATH = "@OPENFLUID_SHARE_APPS_INSTALL_PATH@";
const std::string SHARE_WARESDEV_INSTALL_PATH = "@OPENFLUID_SHARE_WARESDEV_INSTALL_PATH@";


// sim2doc default template file path
const std::string SIM2DOC_TPLFILE_NAME = "sim2doc_tpl.tex";


// Version information
const std::string VERSION_MAJOR = "@OPENFLUID_VERSION_MAJOR@";
const std::string VERSION_MINOR = "@OPENFLUID_VERSION_MINOR@";
const std::string VERSION_PATCH = "@OPENFLUID_VERSION_PATCH@";
const std::string VERSION_STATUS = "@OPENFLUID_VERSION_STATUS@";
const std::string VERSION_FULL = "@OPENFLUID_VERSION_FULL@";
const std::string VERSION = "@OPENFLUID_VERSION_MAJOR@.@OPENFLUID_VERSION_MINOR@.@OPENFLUID_VERSION_PATCH@";


// Network domain
const std::string NETWORK_DOMAIN = "@OPENFLUID_NETWORK_DOMAIN@";
const std::string NETWORK_DOMAIN_WWW = "@OPENFLUID_NETWORK_DOMAIN_WWW@";
const std::string NETWORK_DOMAIN_COMMUNITY = "@OPENFLUID_NETWORK_DOMAIN_COMMUNITY@";


// Emails
const std::string EMAIL_CONTACT = "@OPENFLUID_EMAIL_CONTACT@";


// URLs
const std::string URL_OFFICIAL = "@OPENFLUID_URL_OFFICIAL@";
const std::string URL_OFFICIAL_API = "@OPENFLUID_URL_OFFICIAL_API@";
const std::string URL_COMMUNITY = "@OPENFLUID_URL_COMMUNITY@";
const std::string URL_DOC = "@OPENFLUID_URL_DOC@";
const std::string URL_EMAIL_CONTACT = "@OPENFLUID_URL_EMAIL_CONTACT@";
const std::string URL_GITHUB = "@OPENFLUID_URL_GITHUB@";
const std::string URL_ISSUES = "@OPENFLUID_URL_ISSUES@";


// Debug information
const std::string DEBUG_PREFIX = "@OPENFLUID_DEBUG_PREFIX@";


} } //namespaces

#endif /* __OPENFLUID_CONFIG_HPP__ */

